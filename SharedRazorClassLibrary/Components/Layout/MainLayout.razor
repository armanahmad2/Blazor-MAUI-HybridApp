@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style type="text/css">
/*Added by Pranjal*/
.two-column-container {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background-color: #E5E5E5;
    gap: 10px;
}

/* media (max-width: 641px) {
    .two-column-container {
        flex-direction: column;
        gap: 6px;
    }

    .inputcorners {
        padding: 20px 8px !important;
    }
} */

.column {
    flex: 1;
    margin: 0 16px;
}

.styled-box {
    border: 1px solid #3498db; /* Border style and color */
    padding: 10px; /* Optional: Add padding for better appearance */
}

body, html {
    /*height: 100%;
    margin: 0;*/
    /*display: flex;
    align-items: center;
    justify-content: center;*/
}

.centered-container {
    text-align: center;
}

.centered-box {
    border: 1px solid #3498db; /* Border style and color */
    padding: 20px; /* Optional: Add padding for better appearance */
    display: inline-block;
}

.element-with-margin {
    margin-top: 5px;
    margin-bottom: 5px;
}



.fancy-button {
    background-color: #3498db; /* Button background color */
    color: #ffffff; /* Button text color */
    padding: 10px 20px; /* Button padding */
    font-size: 16px; /* Button text font size */
    border: none; /* Remove button border */
    border-radius: 5px; /* Button border radius for rounded corners */
    cursor: pointer; /* Add cursor pointer on hover */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add box shadow for a subtle elevation effect */
    transition: background-color 0.3s ease; /* Smooth background color transition on hover */
    /* Optional: Add other styles for a more fancy look */
}

    .fancy-button:hover {
        background-color: #2c81ba; /* Change background color on hover */
    }

/*//modal pop*/
.modal {
    display: flex;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: #fefefe;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 60%; /* Set custom width */
    height: 300px; /* Set custom height */
    overflow-y: auto; /* Add vertical scroll if content exceeds the height */
}

.close {
    float: right;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
}

.link-button {
    background-color: transparent;
    border: none;
    text-decoration: underline;
    color: #3498db; /* Link color */
    cursor: pointer;
    padding: 0;
}

/*OfferWizard*/
/*//Added by Sameer*/

* {
    box-sizing: border-box;
    font-family: "Helvetica Neue", sans-serif;
}


.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 60vh;
}

.radio-tile-group {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

    .radio-tile-group .input-container {
        position: relative;
        height: 8rem;
        width: 8rem;
        margin: 0.5rem;
    }

        .radio-tile-group .input-container .radio-button {
            opacity: 0;
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            margin: 0;
            cursor: pointer;
        }

        .radio-tile-group .input-container .radio-tile {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            border: 2px solid #079ad9;
            border-radius: 50%;
            padding: 3rem;
            transition: transform 300ms ease;
        }

        .radio-tile-group .input-container .icon svg {
            fill: #079ad9;
            width: 4rem;
            height: 4rem;
        }

        .radio-tile-group .input-container .radio-tile-label {
            text-align: center;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #079ad9;
        }

        .radio-tile-group .input-container .radio-button:checked + .radio-tile {
            background-color: white;
            box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
            border: 2px solid #079ad9;
            color: white;
            transform: scale(1.1, 1.1);
        }

            .radio-tile-group .input-container .radio-button:checked + .radio-tile .icon svg {
                /*fill: white;*/
                /*background-color: white;*/
                /*box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);*/
            }

            .radio-tile-group .input-container .radio-button:checked + .radio-tile .radio-tile-label {
                color: #079ad9;
                background-color: white box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
            }


#regForm {
    background-color: white;
    margin: 10px auto;
    padding: 40px;
    /*width: 70%;*/
    min-width: 100%;
    min-height: 100%;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
}


h1 {
    text-align: center;
}

input:not([type='range']) {
    padding: 10px;
    width: 100%;
    font-size: 17px;
    /*border: 1px solid #aaaaaa;*/
}

/* Mark input boxes that gets an error on validation: */
input.invalid {
    background-color: #ffdddd;
}

/* Hide all steps by default: */
.tab {
    display: none;
}

/* Make circles that indicate the steps of the form: */
.step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbbbbb;
    border: none;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.5;
}

    .step.active {
        opacity: 1;
    }

    /* Mark the steps that are finished and valid: */
    .step.finish {
        background-color: #04AA6D;
    }


input {
    padding: 10px;
    width: 100%;
    font-size: 17px;
}

.btn-group-vertical > .btn-outline-primary {
    margin-bottom: 5px;
}

.btn-group > .btn-outline-primary {
    margin-right: 5px;
}

/*//Added by Sameer*/
/*offerwizard*/

/*CSS form HomeCal layout -Start*/
/*//Added by Pranjal*/
.inputcorners {
    border-radius: 5px;
    border: 2px solid #73AD21;
    padding: 20px;
    width: auto;
    height: 30px;
}


.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 50%;
}

.imagecolumn {
    float: left;
    width: 33.33%;
    padding: 5px;
}

/* Clear floats after image containers */
.imagerow::after {
    content: "";
    clear: both;
    display: table;
}

.box {
    box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.034), 0 6.7px 5.3px rgba(0, 0, 0, 0.048), 0 12.5px 10px rgba(0, 0, 0, 0.06), 0 22.3px 17.9px rgba(0, 0, 0, 0.072), 0 41.8px 33.4px rgba(0, 0, 0, 0.086), 0 100px 80px rgba(0, 0, 0, 0.12);
    /* min-height: 200px;
    width: 50vw;
    margin: 100px auto;*/
    background: white;
    border-radius: 15px;
    padding-top: 10px
}
/*CSS form HomeCal layout -Start*/

</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>

<!-- This is the glue between Blazor and Chart.js -->
<script src="_content/ChartJs.Blazor.Fork/ChartJsBlazorInterop.js"></script>
<script>


    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {

            if (y[i].getAttribute("name") == "phone") {
                let regex = /[0-9]{10}/;
                let result = regex.test(y[i].value);
                if (!result) {
                    // add an "invalid" class to the field:
                    y[i].className += " invalid";
                    // and set the current valid status to false
                    valid = false;
                }
            }


            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }


</script>